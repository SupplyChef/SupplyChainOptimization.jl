var documenterSearchIndex = {"docs":
[{"location":"adding special constraints/#Adding-Special-Constraints","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"","category":"section"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"SupplyChainOptimization contains many built-in concepts that enable the modeling of many scenarios. In some special cases specific constraints may need to be considered that are not part of the built-in concepts. SupplyChainOptimization allows for the direct manipulation of the optimization model to add these constraints.","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"warning: Beware!\nDirectly manipulating the optimization model requires advanced mathematical modeling knowledge and is not recommended unless absolutely necessary.","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"When the minimize_costs! function is called it calls two other functions: create_network_cost_minimization_model! and optimize_network_optimization_model!. create_network_cost_minimization_model! creates an optimization model and stores it in the supply chain optimization_model attribute (see Optimization Model). This process is seamless and usually operates behind the scene. However there are cases where knowing about this process can be helpful. One such case is if a specific constraint needs to be added to the optimization model.","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"In the example below we will use the same setup as in the multi-period network optimization example (see Multi-period Optimization). The one difference is that we now want to control how many nodes can be opened in each time period. Such a constraint may be needed in real-life because the real-estate team, labor team or supply management team cannot handle too many opening at the same time. We will modify the usual call to the optimizer and break it into three parts: the creation of the optimization model, the addition of the constraint on openings, the call to the optimizer.","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"SupplyChainOptimization.create_network_cost_minimization_model!(sc, HiGHS.Optimizer)\n\n@constraint(sc.optimization_model, sum(sc.optimization_model[:opening][:,1]) == 2)\n@constraint(sc.optimization_model, sum(sc.optimization_model[:opening][:,2]) == 1)\n@constraint(sc.optimization_model, sum(sc.optimization_model[:opening][:,3]) == 1)\n\nSupplyChainOptimization.optimize_network_optimization_model!(sc)","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"In the first period we allow two opening (we need at least a plant and a storage location). In the subsequent periods, we allow one opening per period. A list of available variables in the optimization model is provided in the Optimization Model section.","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"The full code is as below. Notice the use of JuMP, the optimization library, to add the additional constraints.","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"using CSV using DataFrames using JuMP using HiGHS using SupplyChainModeling using SupplyChainOptimization","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"nm = tempname() url = \"https://raw.githubusercontent.com/plotly/datasets/master/2014uscities.csv\" download(url, nm) us_cities = CSV.read(nm, DataFrame) rm(nm)","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"sort!(us_cities, [:pop], rev=true)","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"sc = SupplyChain(3)","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"product1 = Product(\"Product 1\") product2 = Product(\"Product 2\") addproduct!(sc, product1) addproduct!(sc, product2)","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"for r in eachrow(first(uscities, 10))     supplier = Supplier(\"Supplier r.name\", Location(r.lat + 0.2, r.lon - 0.2, r.name))     addproduct!(supplier, product1; unitcost=1.0)     addsupplier!(sc, supplier) end","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"for r in eachrow(first(uscities, 10))     plant = Plant(\"Plant r.name\", Location(r.lat - 0.2, r.lon - 0.2, r.name);             fixedcost= 6000000 + r.pop / 2,             initialopened=false)     addproduct!(plant, product2; billofmaterial=Dict{Product, Float64}(product1 => 1.0), unitcost=1.0)     addplant!(sc, plant) end","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"for r in eachrow(first(uscities, 10))     storage = Storage(\"Storage r.name\", Location(r.lat + 0.2, r.lon + 0.2, r.name);             fixedcost= 2000000 + r.pop / 2,             initialopened=false)     addproduct!(storage, product2; initialinventory=0, unitholdingcost=0.01)     addstorage!(sc, storage) end","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"for (i, r) in enumerate(eachrow(first(uscities, 100)))     customer = Customer(\"customer i\", Location(r.lat, r.lon, r.name))     addcustomer!(sc, customer)     adddemand!(sc, customer, product2, [r.pop / 8000 for i in 1:3]) end","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"for s in sc.suppliers, p in sc.plants     addlane!(sc, Lane(s, p; unitcost=haversine(s.location, p.location) / 750)) end","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"for p in sc.plants, s in sc.storages     addlane!(sc, Lane(p, s; unitcost=haversine(p.location, s.location) / 750)) end","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"for c in sc.customers, s in sc.storages     addlane!(sc, Lane(s, c; unitcost=haversine(s.location, c.location) / 250)) end","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"SupplyChainOptimization.createnetworkcostminimizationmodel!(sc, HiGHS.Optimizer)","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"@constraint(sc.optimizationmodel, sum(sc.optimizationmodel[:opening][:,1]) == 2) @constraint(sc.optimizationmodel, sum(sc.optimizationmodel[:opening][:,2]) == 1) @constraint(sc.optimizationmodel, sum(sc.optimizationmodel[:opening][:,3]) == 1)","category":"page"},{"location":"adding special constraints/","page":"Adding Special Constraints","title":"Adding Special Constraints","text":"SupplyChainOptimization.optimizenetworkoptimization_model!(sc)","category":"page"},{"location":"multi-period optimization/#Multi-period-Optimization","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"","category":"section"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"In this section we will see how to use SupplyChainOptimization for multi-period network optimization. We will consider a use case where demand is expected to grow over time. The setup is similar to the one in Locations Optimization with the difference that we are looking at 15 years of data instead of 1.","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"using CSV using DataFrames using Cbc using SupplyChainModeling using SupplyChainOptimization","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"nm = tempname() url = \"https://raw.githubusercontent.com/plotly/datasets/master/2014uscities.csv\" download(url, nm) us_cities = CSV.read(nm, DataFrame) rm(nm)","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"sort!(us_cities, [:pop], rev=true)","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"sc = SupplyChain(15)","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"product1 = Product(\"Product 1\") product2 = Product(\"Product 2\") addproduct!(sc, product1) addproduct!(sc, product2)","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"for r in eachrow(first(uscities, 10))     supplier = Supplier(\"Supplier r.name\", Location(r.lat + 0.2, r.lon - 0.2, r.name))     addproduct!(supplier, product1; unitcost=1.0)     addsupplier!(sc, supplier) end","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"for r in eachrow(first(uscities, 10))     plant = Plant(\"Plant r.name\", Location(r.lat - 0.2, r.lon - 0.2, r.name);             fixedcost= 6000000 + r.pop / 2,             initialopened=false)     addproduct!(plant, product2; billofmaterial=Dict{Product, Float64}(product1 => 1.0), unitcost=1.0)     addplant!(sc, plant) end","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"for r in eachrow(first(uscities, 10))     storage = Storage(\"Storage r.name\", Location(r.lat + 0.2, r.lon + 0.2, r.name);             fixedcost= 2000000 + r.pop / 2,             initialopened=false)     addproduct!(storage, product2; initialinventory=0, unitholdingcost=0.01)     addstorage!(sc, storage) end","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"for (i, r) in enumerate(eachrow(first(uscities, 100)))     customer = Customer(\"customer i\", Location(r.lat, r.lon, r.name))     addcustomer!(sc, customer)     adddemand!(sc, customer, product2, [r.pop / (8000 * (6-min(i, 5))) for i in 1:15]) end","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"for s in sc.suppliers, p in sc.plants     add_lane!(sc, Lane(s, p, haversine(s.location, p.location) / 750)) end","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"for p in sc.plants, s in sc.storages     add_lane!(sc, Lane(p, s, haversine(p.location, s.location) / 750)) end","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"for c in sc.customers, s in sc.storages     add_lane!(sc, Lane(s, c, haversine(s.location, c.location) / 250)) end","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"minimize_cost!(sc, Cbc.Optimizer)","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"The results show the network evolving in three phases:","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"in the first phase, we open a plant and a storage location in Philadelphia to service the East Coast and a storage location in San Diego (supplied by the plant in Philadelphia) to service the West Coast.\nin the second phase, we open a third storage location in Dallas\nin the third phase, we open a plant in San Diego.","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"Each time a new facility is opened the fixed costs go up but the transportation costs are reduced compared to the configuration where the facility stays closed. The costs can be visualized as below.","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"(Image: costs)","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"The final network configuration is shown in the figure below.","category":"page"},{"location":"multi-period optimization/","page":"Multi-period Optimization","title":"Multi-period Optimization","text":"(Image: optimized locations)","category":"page"},{"location":"optimization locations/#Locations-Optimization","page":"Locations Optimization","title":"Locations Optimization","text":"","category":"section"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"In this section we will see how to find the best network to service customer demand. We will consider a set of 40 possible storage locations and a set of 350 customers both distributed throughout the US. We specify the cost of operating each storage location and the cost of shipping the product from each storage location to each customer. Finally we indicate the demand for each customer. Once this is done we optimize the network.","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"using CSV using DataFrames using SupplyChainModeling using SupplyChainOptimization","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"nm = tempname() url = \"https://raw.githubusercontent.com/plotly/datasets/master/2014uscities.csv\" download(url, nm) us_cities = CSV.read(nm, DataFrame) rm(nm)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"sort!(us_cities, [:pop], rev=true)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"sc = SupplyChain(1)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"product = Product(\"Product 1\") add_product!(sc, product)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for r in eachrow(first(uscities, 40))     storage = Storage(\"Storage r.name\", Location(r.lat + 0.2, r.lon + 0.2, r.name);             fixedcost= 2000000 + r.pop / 2,             openingcost=0.0,             closingcost=0.0,             initialopened=false)     addproduct!(storage, product; initialinventory=100000)     add_storage!(sc, storage) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for (i, r) in enumerate(eachrow(first(uscities, 350)))     customer = Customer(\"customer i\", Location(r.lat, r.lon, r.name))     addcustomer!(sc, customer)     adddemand!(sc, customer, product, [r.pop / 10000]) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for c in sc.customers, s in sc.storages     addlane!(sc, Lane(s, c; unitcost=haversine(s.location, c.location) / 250)) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"minimize_cost!(sc)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"After optimizing the network we can visualize the results.","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"plot_flows(sc; showlegend=false)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"(Image: optimized locations)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"In the next example, we optimize a more complete network: we will consider where to build plants, storage locations to service customers and which suppliers to buy from. The customers consume one type of product which is produced by the plants and stored at the storage locations. The plants need a different product as raw material. This product is sourced from suppliers.","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"The process is similar to the previous example: we setup the network using the built-in concepts, call the optimize_network! function and query the results.","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"using CSV using DataFrames using SupplyChainOptimization","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"nm = tempname() url = \"https://raw.githubusercontent.com/plotly/datasets/master/2014uscities.csv\" download(url, nm) us_cities = CSV.read(nm, DataFrame) rm(nm)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"sort!(us_cities, [:pop], rev=true)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"sc = SupplyChain(1)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"product1 = Product(\"Product 1\") product2 = Product(\"Product 2\") addproduct!(sc, product1) addproduct!(sc, product2)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for r in eachrow(first(uscities, 20))     supplier = Supplier(\"Supplier r.name\", Location(r.lat + 0.2, r.lon - 0.2, r.name))     addproduct!(supplier, product1; unitcost=1.0)     addsupplier!(sc, supplier) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for r in eachrow(first(uscities, 20))     plant = Plant(\"Plant r.name\", Location(r.lat - 0.2, r.lon - 0.2, r.name);             fixedcost= 6000000 + r.pop / 2,             openingcost=0.0,             closingcost=0.0,             initialopened=false)     addproduct!(plant, product2; billofmaterial=Dict{Product, Float64}(product1 => 1.0), unitcost=1.0)     addplant!(sc, plant) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for r in eachrow(first(uscities, 20))     storage = Storage(\"Storage r.name\", Location(r.lat + 0.2, r.lon + 0.2, r.name);             fixedcost= 2000000 + r.pop / 2,             openingcost=0.0,             closingcost=0.0,             initialopened=false)     addproduct!(storage, product2; initialinventory=0)     addstorage!(sc, storage) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for (i, r) in enumerate(eachrow(first(uscities, 350)))     customer = Customer(\"customer i\", Location(r.lat, r.lon, r.name))     addcustomer!(sc, customer)     adddemand!(sc, customer, product2, [r.pop / 10000]) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for s in sc.suppliers, p in sc.plants     addlane!(sc, Lane(s, p; unitcost=haversine(s.location, p.location) / 750)) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for p in sc.plants, s in sc.storages     addlane!(sc, Lane(p, s; unitcost=haversine(p.location, s.location) / 750)) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"for c in sc.customers, s in sc.storages     addlane!(sc, Lane(s, c; unitcost=haversine(s.location, c.location) / 250)) end","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"minimize_cost!(sc)","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"The network can be visualized (see below). We can see that the optimal network has two clusters of plants/storage locations; one to service the West coast and one to service the East coast. Additionally two smaller storage locations are used as hubs to reduce overall costs.","category":"page"},{"location":"optimization locations/","page":"Locations Optimization","title":"Locations Optimization","text":"(Image: optimized locations)","category":"page"},{"location":"sponsor/#Sponsor","page":"Sponsor","title":"Sponsor","text":"","category":"section"},{"location":"sponsor/","page":"Sponsor","title":"Sponsor","text":"Work on SupplyChainOptimization is sponsored by SupplyChops a company specializing in supply chain optimization.","category":"page"},{"location":"optimization model/#Optimization-Model","page":"Optimization Model","title":"Optimization Model","text":"","category":"section"},{"location":"optimization model/","page":"Optimization Model","title":"Optimization Model","text":"The optimization model contains the following variables:","category":"page"},{"location":"optimization model/","page":"Optimization Model","title":"Optimization Model","text":"- opened[plants_storages, times]: whether a plant or a storage location is opened during a given period.\n- opening[plants_storages, times]: whether a plant or a storage location is opening during a given period (it is now opened but was closed).\n- closing[plants_storages, times]: whether a plant or a storage location is closing during a given period (it is now closed but was opened).\n- bought[products, suppliers, times]: the amount of product bought from a supplier during a given period.\n- produced[products, plants, times]: the amount of product produced by a plant during a given period.\n- stored_at_start[products, storages, times]: the amount of product stored at a storage location at the beginning of a given period. \n- stored_at_end[products, storages, times]: the amount of product stored at a storage location at the end of a given period.\n- used[lanes, times]: whether a lane is used during a given period.\n- sent[products, lanes, times]: the amount of product sent onto a lane during a given period.\n- received[products, lanes, times]: the amount of product received from a lane during a given period.\n- lost_sales[products, customers, times]: the amount of demand for a product by a customer lost during a given period.","category":"page"},{"location":"optimization model/","page":"Optimization Model","title":"Optimization Model","text":"See Adding Special Constraints for an example on how to use these variables to add constraints to the optimization model.","category":"page"},{"location":"optimization flows/#Flow-Optimization","page":"Flow Optimization","title":"Flow Optimization","text":"","category":"section"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"In this section we will see how to best flow products through the supply chain. We will assume that we want to leverage the current network (we will not open or close facilities – we will do so in the Locations Optimization example). Finding the right facility to serve customers from can be simple if there are few constraints but can become challenging when considering constraints such as throughput limits or considering complex cost structures. We will start with a simple example and then show how to handle realistic constraints.","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"In the first example we consider four storage locations servicing 350 customers distributed throughout the US. The aim is to find which storage location service which customer. The setup is done as in the following code.","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"using CSV using DataFrames using SupplyChainModeling using SupplyChainOptimization","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"nm = tempname() url = \"https://raw.githubusercontent.com/plotly/datasets/master/2014uscities.csv\" download(url, nm) uscities = CSV.read(nm, DataFrame) uscities[!,:name] = strip.(us_cities[!,:name]) rm(nm)","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"sort!(us_cities, [:pop], rev=true)","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"sc = SupplyChain(1)","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"product = Product(\"Product 1\") add_product!(sc, product)","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"for r in eachrow(uscities[in([\"Fort Worth\", \"Long Beach\", \"Philadelphia\", \"Louisville/Jefferson County\"]).(uscities.name), :])     storage = Storage(\"Storage r.name\", Location(r.lat + 0.2, r.lon + 0.2, r.name);             fixedcost= 2000000 + r.pop / 2,             openingcost=0.0,             closingcost=0.0,             initialopened=false)     addproduct!(storage, product; initialinventory=100000)     addstorage!(sc, storage) end","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"for (i, r) in enumerate(eachrow(first(uscities, 350)))     customer = Customer(\"customer i\", Location(r.lat, r.lon, r.name))     addcustomer!(sc, customer)     adddemand!(sc, customer, product, [r.pop / 10000]) end","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"for c in sc.customers, s in sc.storages     addlane!(sc, Lane(s, c; unitcost=haversine(s.location, c.location) / 250)) end","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"minimize_cost!(sc)","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"We can visualize the results.","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"(Image: optimizing_flows_free)","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"In the second example, we will add a constraint on the maximal throughput that each storage location can support. We do this with a simple modification of the code:","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"add_product!(storage, product; initial_inventory=100_000, maximum_throughput=2_400)","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"After optimizing the network we see that some customers have been re-assigned to other storage locations to ensure that the throughput capacity is not exceeded.","category":"page"},{"location":"optimization flows/","page":"Flow Optimization","title":"Flow Optimization","text":"(Image: optimizing_flows_maximum_throughput)","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Optimization","page":"Reference","title":"Optimization","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"minimize_cost!\nmaximize_profits!\nSupplyChainOptimization.create_network_cost_minimization_model\nSupplyChainOptimization.create_network_profit_maximization_model\nSupplyChainOptimization.create_network_cost_minimization_model!\nSupplyChainOptimization.create_network_profit_maximization_model!\nSupplyChainOptimization.optimize_network_optimization_model!\nSupplyChainOptimization.create_network_model\nhaversine","category":"page"},{"location":"reference/#SupplyChainOptimization.minimize_cost!","page":"Reference","title":"SupplyChainOptimization.minimize_cost!","text":"minimize_cost!(supply_chain::SupplyChain, optimizer=HiGHS.Optimizer)\n\nOptimizes the supply chain for cost. The service level should be set to one to force the optimizer to serve all customers.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.maximize_profits!","page":"Reference","title":"SupplyChainOptimization.maximize_profits!","text":"maximize_profits!(supply_chain::SupplyChain, optimizer=HiGHS.Optimizer)\n\nOptimizes the supply chain for profits. The service level should be set to zero to let the optimizer decide which customers to serve.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.create_network_cost_minimization_model","page":"Reference","title":"SupplyChainOptimization.create_network_cost_minimization_model","text":"Creates an optimization model for cost minimization.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.create_network_profit_maximization_model","page":"Reference","title":"SupplyChainOptimization.create_network_profit_maximization_model","text":"Creates an optimization model for profit maximization.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.create_network_cost_minimization_model!","page":"Reference","title":"SupplyChainOptimization.create_network_cost_minimization_model!","text":"Creates an optimization model for cost minimization.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.create_network_profit_maximization_model!","page":"Reference","title":"SupplyChainOptimization.create_network_profit_maximization_model!","text":"Creates an optimization model for profit maximization.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.optimize_network_optimization_model!","page":"Reference","title":"SupplyChainOptimization.optimize_network_optimization_model!","text":"Optimizes an optimization model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.create_network_model","page":"Reference","title":"SupplyChainOptimization.create_network_model","text":"Creates an optimization model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.haversine","page":"Reference","title":"SupplyChainOptimization.haversine","text":"Computes the great circle distance between two locations. The distance is expressed in meter.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Querying-Results","page":"Reference","title":"Querying Results","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"get_financials\nget_total_profits\nget_total_costs\nget_total_fixed_costs\nget_total_transportation_costs\nget_inventory_at_start\nget_inventory_at_end\nget_production\nget_receipts\nget_shipments\nis_opened\nis_opening\nis_closing","category":"page"},{"location":"reference/#SupplyChainOptimization.get_financials","page":"Reference","title":"SupplyChainOptimization.get_financials","text":"get_financials(supply_chain; max_time=supply_chain.horizon)\n\nGets the financial results of operating the supply chain.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_total_profits","page":"Reference","title":"SupplyChainOptimization.get_total_profits","text":"get_total_profits(supply_chain::SupplyChain)\n\nGets the total profits of operating the supply chain.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_total_costs","page":"Reference","title":"SupplyChainOptimization.get_total_costs","text":"get_total_costs(supply_chain::SupplyChain)\n\nGets the total costs of operating the supply chain.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_total_fixed_costs","page":"Reference","title":"SupplyChainOptimization.get_total_fixed_costs","text":"get_total_fixed_costs(supply_chain::SupplyChain)\n\nGets the total fixed costs of operating the supply chain.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_total_transportation_costs","page":"Reference","title":"SupplyChainOptimization.get_total_transportation_costs","text":"get_total_transportation_costs(supply_chain::SupplyChain)\n\nGets the total transportation costs of operating the supply chain.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_inventory_at_start","page":"Reference","title":"SupplyChainOptimization.get_inventory_at_start","text":"Gets the inventory of a product stored at the start of a period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_inventory_at_end","page":"Reference","title":"SupplyChainOptimization.get_inventory_at_end","text":"Gets the inventory of a product stored at the end of a period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_production","page":"Reference","title":"SupplyChainOptimization.get_production","text":"get_production(supply_chain::SupplyChain, plant::Plant, product::Product, period=1)\n\nGets the amount of a given product produced at a given plant during a given period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_receipts","page":"Reference","title":"SupplyChainOptimization.get_receipts","text":"get_receipts(supply_chain::SupplyChain, storage::Storage, product::Product, period=1)\n\nGets the amount of a given product received at a given storage location at a given period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.get_shipments","page":"Reference","title":"SupplyChainOptimization.get_shipments","text":"get_shipments(supply_chain::SupplyChain, storage::Storage, product::Product, period=1)\n\nGets the amount of a given product sent from a given storage location at a given period.\n\n\n\n\n\nget_shipments(supply_chain::SupplyChain, plant::Plant, product::Product, period=1)\n\nGets the amount of a given product sent from a given plant at a given period.\n\n\n\n\n\nget_shipments(supply_chain::SupplyChain, supplier::Supplier, product::Product, period=1)\n\nGets the amount of a given product shipped from a given supplier at a given period.\n\n\n\n\n\nget_shipments(supply_chain::SupplyChain, lane::Lane, product::Product, period=1)\n\nGets the amount of a given product sent on a lane at a given period.\n\n\n\n\n\nget_shipments(supply_chain::SupplyChain, lane::Lane, destination, product::Product, period=1)\n\nGets the amount of a given product sent on a lane at a given period.\n\n\n\n\n\nget_shipments(supply_chain::SupplyChain, customer::Customer, product::Product, period=1)\n\nGets the amount of a given product received by a given customer at a given period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.is_opened","page":"Reference","title":"SupplyChainOptimization.is_opened","text":"is_opened(supply_chain::SupplyChain, storage::Storage, period=1)\n\nGets whether a given storage location is opened during a given period.\n\n\n\n\n\nis_opened(supply_chain::SupplyChain, plant::Plant, period=1)\n\nGets whether a given plant is opened during a given period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.is_opening","page":"Reference","title":"SupplyChainOptimization.is_opening","text":"Gets whether a given storage location is opening during a given period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.is_closing","page":"Reference","title":"SupplyChainOptimization.is_closing","text":"Gets whether a given storage location is closing during a given period.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Visualization","page":"Reference","title":"Visualization","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"plot_network\nplot_flows\nplot_costs\nplot_financials\nplot_inventory\nanimate_network\nanimate_flows\nmovie_network","category":"page"},{"location":"reference/#SupplyChainOptimization.plot_network","page":"Reference","title":"SupplyChainOptimization.plot_network","text":"plot_network(supply_chain, period=1; geography=\"usa\", showlegend=true)\n\nPlots the nodes of the supply chain on a map.\n\nThe geography must be one of: \"world\" | \"usa\" | \"europe\" | \"asia\" | \"africa\" | \"north america\" | \"south america\".\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.plot_flows","page":"Reference","title":"SupplyChainOptimization.plot_flows","text":"plot_flows(supply_chain, period=1; geography=\"usa\", showlegend=true)\n\nPlots the flows of products in the supply chain. \n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.plot_costs","page":"Reference","title":"SupplyChainOptimization.plot_costs","text":"plot_costs(supply_chain)\n\nPlots the costs of operating the supply chain. \n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.plot_financials","page":"Reference","title":"SupplyChainOptimization.plot_financials","text":"plot_financials(supply_chain; max_time=supply_chain.horizon)\n\nPlots the financial results of operating the supply chain.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.plot_inventory","page":"Reference","title":"SupplyChainOptimization.plot_inventory","text":"plot_inventory(supply_chain, storage, product)\n\nPlots the amount of inventory of a product on-hand at a storage location at the beginning of each period. \n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.animate_network","page":"Reference","title":"SupplyChainOptimization.animate_network","text":"animate_network\n\nCreates an animation of the network through time.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.animate_flows","page":"Reference","title":"SupplyChainOptimization.animate_flows","text":"animate_flows; geography=\"usa\", showlegend=true, excluded_origins=[])\n\nCreates an animation of the product flows through time.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SupplyChainOptimization.movie_network","page":"Reference","title":"SupplyChainOptimization.movie_network","text":"movie_network\n\nMakes a movie of the network evolution.\n\n\n\n\n\n","category":"function"},{"location":"#SupplyChainOptimization.jl","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"","category":"section"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"SupplyChainOptimization.jl is a package for modeling and optimizing supply chains.","category":"page"},{"location":"#Installation","page":"SupplyChainOptimization.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"SupplyChainOptimization can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"pkg> add SupplyChainOptimization","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"SupplyChainOptimization.jl needs an optimizer to find optimal solutions to supply chain design problems. By default the HiGHS solver is used. It is a powerful open-source solver. Other solvers can be used. The solver must be compatible with JuMP and must be able to solve mixed integer programming problems. Solvers that meet these criteria include:","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"Cbc\nSCIP\nGurobi\nCPLEX\nXpress","category":"page"},{"location":"#Getting-started","page":"SupplyChainOptimization.jl","title":"Getting started","text":"","category":"section"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"Optimizing the supply chain is done in three steps:","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"Modeling the supply chain using built-in concepts such as storage locations and customers.\nInvoke the solver. This step may take more or less time depending on the difficulty of the problem.\nQuerying and visualizing the results.","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"In the example below we search for the best storage locations to use to supply a set of customers. We first download data on US cities. Then we create one product, a set of 40 possible storage locations and a set of 350 customers both distributed throughout the US. We specify the cost of operating each storage location and the cost of shipping the product from each storage location to each customer. Finally we indicate the demand for each customer. Once this is done we optimize the network.","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"using CSV using DataFrames using SupplyChainOptimization","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"nm = tempname() url = \"https://raw.githubusercontent.com/plotly/datasets/master/2014uscities.csv\" download(url, nm) us_cities = CSV.read(nm, DataFrame) rm(nm)","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"sort!(us_cities, [:pop], rev=true)","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"sc = SupplyChain(1)","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"product = Product(\"Product 1\") add_product!(sc, product)","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"for r in eachrow(first(uscities, 40))     storage = Storage(\"Storage r.name\", Location(r.lat + 0.2, r.lon + 0.2, r.name);             fixedcost= 2000000 + r.pop / 2,             openingcost=0.0,             closingcost=0.0,             initialopened=false)     addproduct!(storage, product; initialinventory=100000)     add_storage!(sc, storage) end","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"for (i, r) in enumerate(eachrow(first(uscities, 350)))     customer = Customer(\"customer i\", Location(r.lat, r.lon, r.name))     addcustomer!(sc, customer)     adddemand!(sc, customer, product, [r.pop / 10000]) end","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"for c in sc.customers, s in sc.storages     addlane!(sc, Lane(s, c; unitcost=haversine(s.location, c.location) / 250)) end","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"minimize_cost!(sc)","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"After optimizing the network we can visualize the results.","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"plot_flows(sc; showlegend=false)","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"(Image: getting_started)","category":"page"},{"location":"","page":"SupplyChainOptimization.jl","title":"SupplyChainOptimization.jl","text":"SupplyChainOptimization comes with a variety of built-in concepts including Customers, Lanes, Plants, Storages, and Suppliers. Each of these concepts has attributes that are used to ensure constraints are met and costs are minimized.","category":"page"},{"location":"inventory movements/#Inventory-Movements","page":"Inventory Movements","title":"Inventory Movements","text":"","category":"section"},{"location":"inventory movements/","page":"Inventory Movements","title":"Inventory Movements","text":"Network optimization is mainly about long term inventory flows. In this example we will show to use SupplyChainOptimization to compute shorter term inventory movements and optimal ordering.","category":"page"},{"location":"inventory movements/","page":"Inventory Movements","title":"Inventory Movements","text":"We will consider a simple network with one supplier, one storage location, one customer and a single product. The storage location must maintain enough inventory to meet the customer's demand for the product. The storage location can order inventory from the supplier. Each time it orders it pays an ordering cost. The storage location also pays a holding cost for any inventory left at the end of each time period. We want to find the best way to order inventory into the storage location. We consider a problem over 26 periods (this would be 6 months if each period represents weekly demand).","category":"page"},{"location":"inventory movements/","page":"Inventory Movements","title":"Inventory Movements","text":"The problem is modeled and solved as shown below.","category":"page"},{"location":"inventory movements/","page":"Inventory Movements","title":"Inventory Movements","text":"using HiGHS\nusing JuMP\nusing SupplyChainModeling\nusing SupplyChainOptimization\n\nSeattle = Location(47.608013, -122.335167)\n\nsc = SupplyChain(26)\n\nordering_cost = 100\n\nproduct = Product(\"Product 1\")\nadd_product!(sc, product)\n\nsupplier = Supplier(\"Supplier 1\", Seattle)\nadd_product!(supplier, product; unit_cost=0.0)\nadd_supplier!(sc, supplier)\n\nstorage = Storage(\"Storage 1\", Seattle; \n            fixed_cost= 0, \n            initial_opened=true)\nadd_product!(storage, product; additional_stock_cover=0, initial_inventory=nothing, unit_holding_cost=0.01)\nadd_storage!(sc, storage)\n\ncustomer = Customer(\"Customer 1\", Seattle)\nadd_customer!(sc, customer)\nadd_demand!(sc, customer, product, [100.0 for i in 1:sc.horizon])\n\nlane = Lane(supplier, storage; minimum_quantity=1.0, fixed_cost=ordering_cost)\nadd_lane!(sc, lane)\nadd_lane!(sc, Lane(storage, customer; minimum_quantity=1.0))\n\nSupplyChainOptimization.minimize_cost!(sc)","category":"page"},{"location":"inventory movements/","page":"Inventory Movements","title":"Inventory Movements","text":"Once solve we can display the inventory at the storage location.","category":"page"},{"location":"inventory movements/","page":"Inventory Movements","title":"Inventory Movements","text":"plot_inventory(sc, storage, product)","category":"page"},{"location":"inventory movements/","page":"Inventory Movements","title":"Inventory Movements","text":"(Image: inventory_movements)","category":"page"}]
}
